generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("PG_DATABASE_URL")
}

model User {
    id                 Int       @id @default(autoincrement())
    fullName           String    @db.VarChar(32)
    userName           String    @unique @db.VarChar(32)
    userNameLowerCase  String    @unique @db.VarChar(32)
    email              String    @unique @db.VarChar(256)
    role               String    @default("user")
    dateEmailVerified  DateTime?
    password           String?   @db.VarChar(256)
    avatarImageUrl     String?   @db.VarChar(256)
    avatarImageProvier String?   @db.VarChar(32)

    authAccounts       AuthAccount[]       @relation(name: "UserAuthAccount")
    sessions           UserSession[]       @relation(name: "UserSession")
    settings           UserSettings?       @relation(name: "UserSettings")
    confirmationEmails ConfirmationEmail[] @relation(name: "ConfirmationEmails")
}

model UserSettings {
    id           Int      @id @default(autoincrement())
    userId       Int      @unique
    signInAlerts Boolean? @default(true)

    user User @relation(name: "UserSettings", fields: [userId], references: [id], onDelete: Cascade)
}

model AuthAccount {
    id                   Int     @id @default(autoincrement())
    userId               Int
    providerName         String  @db.VarChar(32)
    providerAccountId    String  @db.VarChar(64)
    providerAccountEmail String  @db.VarChar(256)
    avatarImageUrl       String? @db.VarChar(256)
    accessToken          String  @db.VarChar(256)
    tokenType            String? @db.VarChar(32)
    refreshToken         String? @db.VarChar(256)
    authType             String? @db.VarChar(32)
    authorizationScope   String? @db.VarChar(256)

    user User @relation(name: "UserAuthAccount", fields: [userId], references: [id], onDelete: Cascade)
}

model UserSession {
    id               Int       @id @default(autoincrement())
    userId           Int
    sessionToken     String    @db.VarChar(64)
    dateCreated      DateTime? @default(now())
    dateExpires      DateTime
    dateLastActive   DateTime? @default(now())
    providerName     String?   @db.VarChar(32)
    status           String
    revokeAccessCode String    @unique @db.VarChar(64)

    // Device info
    browserName String? @db.VarChar(32)
    os          String? @db.VarChar(32)
    ipAddress   String? @db.VarChar(64)
    city        String? @db.VarChar(64)
    country     String? @db.VarChar(32)

    user User @relation(name: "UserSession", fields: [userId], references: [id], onDelete: Cascade)
}

model ConfirmationEmail {
    id          Int      @id @default(autoincrement())
    userId      Int
    actionType  String   @db.VarChar(64)
    code        String   @db.VarChar(128) @unique
    dateCreated DateTime @default(now())
    data        String?

    user User @relation(name: "ConfirmationEmails", fields: [userId], references: [id], onDelete: Cascade)
}
